# -*- coding: utf-8 -*-
"""fraud_dashboard.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z7QvnZr3zJZ5TvQpH1hVBQ8GlCL3yVwo
"""

import streamlit as st
import pandas as pd
import joblib

# Load models and encoders
upi_model = joblib.load("upi_model.pkl")
voip_model = joblib.load("voip_model.pkl")
upi_encoders = joblib.load("upi_label_encoders.pkl")
voip_encoders = joblib.load("voip_label_encoders.pkl")

st.title("🚨 Real-Time Fraud Detection Dashboard")

option = st.sidebar.selectbox("Select Fraud Type", ["UPI", "VoIP"])

if option == "UPI":
    st.header("🔐 UPI Transaction Input")
    amount = st.number_input("Transaction Amount", min_value=1.0)
    txn_type = st.selectbox("Transaction Type", ["P2P", "P2M", "QR", "BillPay"])
    txn_status = st.selectbox("Transaction Status", ["SUCCESS", "FAILED", "PENDING"])
    location = st.selectbox("Location", ["Delhi", "Mumbai", "Bangalore"])
    merchant_code = st.text_input("Merchant Code", "M1234")

    input_df = pd.DataFrame([{
        "amount": amount,
        "txn_type": txn_type,
        "txn_status": txn_status,
        "location": location,
        "merchant_code": merchant_code
    }])

    for col in ['txn_type', 'txn_status', 'location', 'merchant_code']:
        input_df[col] = upi_encoders[col].transform(input_df[col].astype(str))

    if st.button("Predict UPI Fraud"):
        score = upi_model.predict_proba(input_df)[0][1]
        st.metric(label="Fraud Risk Score", value=round(score, 2))
        if score > 0.7:
            st.error("⚠️ High Risk Transaction")
        else:
            st.success("✅ Likely Safe")

elif option == "VoIP":
    st.header("📞 VoIP Call Input")
    duration = st.slider("Call Duration (seconds)", 1, 600, 30)
    provider = st.selectbox("VoIP Provider", ["WhatsApp", "Skype", "Zoom", "JioCall"])
    geo_info = st.selectbox("Caller Location", ["Delhi", "Mumbai", "Bangalore"])
    spoof_flag = st.selectbox("Is Spoofed?", [0, 1])

    input_df = pd.DataFrame([{
        "call_duration": duration,
        "voip_provider": provider,
        "geo_info": geo_info,
        "spoof_flag": spoof_flag
    }])

    for col in ['voip_provider', 'geo_info']:
        input_df[col] = voip_encoders[col].transform(input_df[col].astype(str))

    if st.button("Predict VoIP Fraud"):
        score = voip_model.predict_proba(input_df)[0][1]
        st.metric(label="Fraud Risk Score", value=round(score, 2))
        if score > 0.7:
            st.error("🚨 Suspicious Call Detected")
        else:
            st.success("✅ Safe Call")